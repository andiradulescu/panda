env = Environment(
  CC='clang',
  CFLAGS=[
    '-nostdlib',
    '-fno-builtin',
    '-std=gnu11',
    '-Wfatal-errors',
    '-Wno-pointer-to-int-cast',
  ],
  CPPPATH=[".", "../../board/"],
)

if GetOption('ubsan'):
  flags = [
    "-fsanitize=undefined",
    "-fno-sanitize-recover=undefined",
  ]
  env['CFLAGS'] += flags
  env['LINKFLAGS'] += flags

panda = env.SharedObject("panda.os", "panda.c")
libpanda = env.SharedLibrary("libpanda.so", [panda])

if GetOption('coverage'):
  env.Append(
    CFLAGS=["-fprofile-arcs", "-ftest-coverage", "-fprofile-abs-path",],
    LIBS=["gcov"],
  )
  # GCC note file is generated by compiler, ensure we build it, and allow scons to clean it up
  AlwaysBuild(panda)
  env.SideEffect("panda.gcno", panda)
